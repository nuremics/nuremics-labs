import os
import attrs
import json
import pandas as pd
from pathlib import Path

from nuremics import Process
from labs.ops.general.projectile_model import units


@attrs.define
class ProjectileModelProc(Process):
    """
    Simulate projectile motion and compare its trajectory with the analytical solution.

    Process
    -------
        A/ simulate_projectile_motion
            Simulate the motion of a 2D rigid body under gravity projected with an initial velocity.
        B/ calculate_analytical_trajectory
            Calculate the theoretical trajectory of a projectile using analytical equations.
        C/ compare_model_vs_analytical_trajectories
            Plot and save the comparison between simulated (model) and theoretical projectile trajectories.

    Input parameters
    ----------------
        gravity : float
            Acceleration due to gravity (can be positive or negative).
        mass : float
            Mass of the projectile (used in the simulation).

    Input paths
    -----------
        velocity_file : json
            File containing initial conditions (v0, h0, angle).
        configs_folder : folder
            'solver_config.json' : File containing the parameters for solver configuration.
            'display_config.json' : File containing the parameters for display configuration.
        coords_file : csv
            File with 2D coordinates ('X', 'Y') of the polygonal shape to simulate.

    Internal variables
    ------------------
        dict_velocity : dict
            Initial conditions loaded from velocity_file.
        dict_solver_config : dict
            Solver configuration loaded from configs_folder.
        dict_display_config : dict
            Display configuration loaded from coords_file.
        df_trajectory_model : pd.DataFrame
            DataFrame with simulated trajectory generated by the model.
        df_trajectory_model_vs_theory : pd.DataFrame
            DataFrame with analytical and simulated (model) trajectories.

    Outputs (stored in self.output_paths)
    -------
        comp_folder : folder
            'results.xlsx' : File containing simulated (model) and theoritical trajectories.
            'model_vs_theory.png' : Image comparing both trajectories.
    """

    # Parameters
    gravity: float = attrs.field(init=False, metadata={"input": True})
    mass: float = attrs.field(init=False, metadata={"input": True})
    
    # Paths
    velocity_file: Path = attrs.field(init=False, metadata={"input": True}, converter=Path)
    configs_folder: Path = attrs.field(init=False, metadata={"input": True}, converter=Path)
    coords_file: Path = attrs.field(init=False, metadata={"input": True}, converter=Path)

    # Internal
    dict_velocity: dict = attrs.field(init=False)
    dict_solver_config: dict = attrs.field(init=False)
    dict_display_config: dict = attrs.field(init=False)
    df_trajectory_model: pd.DataFrame = attrs.field(init=False)
    df_trajectory_model_vs_theory: pd.DataFrame = attrs.field(init=False)

    def __call__(self):
        super().__call__()

        self.simulate_projectile_motion()
        self.calculate_analytical_trajectory()
        self.compare_model_vs_analytical_trajectories()
    
    def simulate_projectile_motion(self):
        """
        Simulate the motion of a 2D rigid body under gravity projected with an initial velocity.

        Uses
        ----
            gravity
            mass
            velocity_file
            configs_folder/solver_config.json
            configs_folder/display_config.json
            coords_file
            dict_velocity
            dict_solver_config
            dict_display_config
        
        Modifies
        --------
            dict_velocity
            dict_solver_config
            dict_display_config
            df_trajectory_model
        """

        # Load initial conditions
        with open(self.velocity_file) as f:
            self.dict_velocity = json.load(f)

        # Load solver configuration
        path = self.configs_folder / "solver_config.json"
        with open(path) as f:
            self.dict_solver_config = json.load(f)

        # Load display configuration
        path = self.configs_folder / "display_config.json"
        with open(path) as f:
            self.dict_display_config = json.load(f)

        # Read 2D polygon shape coordinates (X, Y) from CSV file
        df_points = pd.read_csv(
            filepath_or_buffer=self.coords_file,
        )

        # Run simulation model
        self.df_trajectory_model = units.simulate_projectile_motion(
            df_points=df_points,
            mass=self.mass,
            gravity=self.gravity,
            h0=0.5,
            v0=self.dict_velocity["v0"],
            angle=self.dict_velocity["angle"],
            timestep=self.dict_solver_config["timestep"],
            fps=self.dict_display_config["fps"],
            window_size=self.dict_display_config["size"],
            verbose=self.verbose,
        )

    def calculate_analytical_trajectory(self):
        """
        Calculate the theoretical trajectory of a projectile using analytical equations.

        Uses
        ----
            gravity
            dict_velocity
            df_trajectory_model

        Modifies
        --------
            df_trajectory_model_vs_theory

        Generates
        ---------
            comp_folder/results.xlsx
        """

        # Create output directory
        output_dir:Path = Path(self.output_paths["comp_folder"])
        output_dir.mkdir(
            exist_ok=True,
            parents=True,
        )

        # Compute analytical solution
        self.df_trajectory_model_vs_theory = units.calculate_analytical_trajectory(
            df=self.df_trajectory_model,
            v0=self.dict_velocity["v0"],
            h0=self.dict_velocity["h0"],
            angle=self.dict_velocity["angle"],
            gravity=self.gravity,
        )

        # Save results to Excel
        self.df_trajectory_model_vs_theory.to_excel(
            excel_writer=os.path.join(self.output_paths["comp_folder"], "results.xlsx"),
            engine="xlsxwriter",
            index=True,
        )
    
    def compare_model_vs_analytical_trajectories(self):
        """
        Plot and save the comparison between simulated (model) and theoretical projectile trajectories.

        Uses
        ----
            df_trajectory_model_vs_theory

        Generates
        ---------
            comp_folder/model_vs_theory.png
        """

        units.compare_model_vs_analytical_trajectories(
            df=self.df_trajectory_model_vs_theory,
            filename=os.path.join(self.output_paths["comp_folder"], "model_vs_theory.png"),
            verbose=self.verbose,
        )


if __name__ == "__main__":
    
    # Define working directory
    working_dir = Path(os.environ["WORKING_DIR"])/"ONE_APP/Study1/2_AnotherProc/Test1"

    # Go to working directory
    os.chdir(working_dir)

    # Create dictionary containing input data
    dict_inputs = {
        "gravity": -9.81,
        "mass": 1.0,
        "velocity_file": Path(os.environ["WORKING_DIR"])/"ONE_APP/study1/0_inputs/input2.json",
        "configs_folder": Path(os.environ["WORKING_DIR"])/"ONE_APP/study1/0_inputs/input3",
        "coords_file": Path(os.environ["WORKING_DIR"])/"ONE_APP/study1/1_OneProc/Test1/output1.csv",
    }
    
    # Create process
    process = AnotherProc(
        dict_inputs=dict_inputs,
        set_inputs=True,
    )
    process.output_paths["comp_folder"] = "output3"

    # Run process
    process()
    process.finalize()